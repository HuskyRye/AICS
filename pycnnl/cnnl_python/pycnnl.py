# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pycnnl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pycnnl')
    _pycnnl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycnnl', [dirname(__file__)])
        except ImportError:
            import _pycnnl
            return _pycnnl
        try:
            _mod = imp.load_module('_pycnnl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pycnnl = swig_import_helper()
    del swig_import_helper
else:
    import _pycnnl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycnnl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pycnnl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycnnl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycnnl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycnnl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycnnl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycnnl.SwigPyIterator_copy(self)

    def next(self):
        return _pycnnl.SwigPyIterator_next(self)

    def __next__(self):
        return _pycnnl.SwigPyIterator___next__(self)

    def previous(self):
        return _pycnnl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycnnl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycnnl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycnnl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycnnl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycnnl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycnnl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycnnl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pycnnl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pycnnl.FloatVector___bool__(self)

    def __len__(self):
        return _pycnnl.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pycnnl.FloatVector_pop(self)

    def append(self, x):
        return _pycnnl.FloatVector_append(self, x)

    def empty(self):
        return _pycnnl.FloatVector_empty(self)

    def size(self):
        return _pycnnl.FloatVector_size(self)

    def swap(self, v):
        return _pycnnl.FloatVector_swap(self, v)

    def begin(self):
        return _pycnnl.FloatVector_begin(self)

    def end(self):
        return _pycnnl.FloatVector_end(self)

    def rbegin(self):
        return _pycnnl.FloatVector_rbegin(self)

    def rend(self):
        return _pycnnl.FloatVector_rend(self)

    def clear(self):
        return _pycnnl.FloatVector_clear(self)

    def get_allocator(self):
        return _pycnnl.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pycnnl.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pycnnl.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.FloatVector_push_back(self, x)

    def front(self):
        return _pycnnl.FloatVector_front(self)

    def back(self):
        return _pycnnl.FloatVector_back(self)

    def assign(self, n, x):
        return _pycnnl.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.FloatVector_reserve(self, n)

    def capacity(self):
        return _pycnnl.FloatVector_capacity(self)
    __swig_destroy__ = _pycnnl.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pycnnl.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.IntVector___nonzero__(self)

    def __bool__(self):
        return _pycnnl.IntVector___bool__(self)

    def __len__(self):
        return _pycnnl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.IntVector___setitem__(self, *args)

    def pop(self):
        return _pycnnl.IntVector_pop(self)

    def append(self, x):
        return _pycnnl.IntVector_append(self, x)

    def empty(self):
        return _pycnnl.IntVector_empty(self)

    def size(self):
        return _pycnnl.IntVector_size(self)

    def swap(self, v):
        return _pycnnl.IntVector_swap(self, v)

    def begin(self):
        return _pycnnl.IntVector_begin(self)

    def end(self):
        return _pycnnl.IntVector_end(self)

    def rbegin(self):
        return _pycnnl.IntVector_rbegin(self)

    def rend(self):
        return _pycnnl.IntVector_rend(self)

    def clear(self):
        return _pycnnl.IntVector_clear(self)

    def get_allocator(self):
        return _pycnnl.IntVector_get_allocator(self)

    def pop_back(self):
        return _pycnnl.IntVector_pop_back(self)

    def erase(self, *args):
        return _pycnnl.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.IntVector_push_back(self, x)

    def front(self):
        return _pycnnl.IntVector_front(self)

    def back(self):
        return _pycnnl.IntVector_back(self)

    def assign(self, n, x):
        return _pycnnl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.IntVector_reserve(self, n)

    def capacity(self):
        return _pycnnl.IntVector_capacity(self)
    __swig_destroy__ = _pycnnl.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pycnnl.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pycnnl.DoubleVector___bool__(self)

    def __len__(self):
        return _pycnnl.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pycnnl.DoubleVector_pop(self)

    def append(self, x):
        return _pycnnl.DoubleVector_append(self, x)

    def empty(self):
        return _pycnnl.DoubleVector_empty(self)

    def size(self):
        return _pycnnl.DoubleVector_size(self)

    def swap(self, v):
        return _pycnnl.DoubleVector_swap(self, v)

    def begin(self):
        return _pycnnl.DoubleVector_begin(self)

    def end(self):
        return _pycnnl.DoubleVector_end(self)

    def rbegin(self):
        return _pycnnl.DoubleVector_rbegin(self)

    def rend(self):
        return _pycnnl.DoubleVector_rend(self)

    def clear(self):
        return _pycnnl.DoubleVector_clear(self)

    def get_allocator(self):
        return _pycnnl.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pycnnl.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pycnnl.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.DoubleVector_push_back(self, x)

    def front(self):
        return _pycnnl.DoubleVector_front(self)

    def back(self):
        return _pycnnl.DoubleVector_back(self)

    def assign(self, n, x):
        return _pycnnl.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pycnnl.DoubleVector_capacity(self)
    __swig_destroy__ = _pycnnl.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pycnnl.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnl.FloatVector2___bool__(self)

    def __len__(self):
        return _pycnnl.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnl.FloatVector2_pop(self)

    def append(self, x):
        return _pycnnl.FloatVector2_append(self, x)

    def empty(self):
        return _pycnnl.FloatVector2_empty(self)

    def size(self):
        return _pycnnl.FloatVector2_size(self)

    def swap(self, v):
        return _pycnnl.FloatVector2_swap(self, v)

    def begin(self):
        return _pycnnl.FloatVector2_begin(self)

    def end(self):
        return _pycnnl.FloatVector2_end(self)

    def rbegin(self):
        return _pycnnl.FloatVector2_rbegin(self)

    def rend(self):
        return _pycnnl.FloatVector2_rend(self)

    def clear(self):
        return _pycnnl.FloatVector2_clear(self)

    def get_allocator(self):
        return _pycnnl.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnl.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnl.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_FloatVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.FloatVector2_push_back(self, x)

    def front(self):
        return _pycnnl.FloatVector2_front(self)

    def back(self):
        return _pycnnl.FloatVector2_back(self)

    def assign(self, n, x):
        return _pycnnl.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.FloatVector2_reserve(self, n)

    def capacity(self):
        return _pycnnl.FloatVector2_capacity(self)
    __swig_destroy__ = _pycnnl.delete_FloatVector2
    __del__ = lambda self: None
FloatVector2_swigregister = _pycnnl.FloatVector2_swigregister
FloatVector2_swigregister(FloatVector2)

class IntVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.IntVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnl.IntVector2___bool__(self)

    def __len__(self):
        return _pycnnl.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.IntVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnl.IntVector2_pop(self)

    def append(self, x):
        return _pycnnl.IntVector2_append(self, x)

    def empty(self):
        return _pycnnl.IntVector2_empty(self)

    def size(self):
        return _pycnnl.IntVector2_size(self)

    def swap(self, v):
        return _pycnnl.IntVector2_swap(self, v)

    def begin(self):
        return _pycnnl.IntVector2_begin(self)

    def end(self):
        return _pycnnl.IntVector2_end(self)

    def rbegin(self):
        return _pycnnl.IntVector2_rbegin(self)

    def rend(self):
        return _pycnnl.IntVector2_rend(self)

    def clear(self):
        return _pycnnl.IntVector2_clear(self)

    def get_allocator(self):
        return _pycnnl.IntVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnl.IntVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnl.IntVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_IntVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.IntVector2_push_back(self, x)

    def front(self):
        return _pycnnl.IntVector2_front(self)

    def back(self):
        return _pycnnl.IntVector2_back(self)

    def assign(self, n, x):
        return _pycnnl.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.IntVector2_reserve(self, n)

    def capacity(self):
        return _pycnnl.IntVector2_capacity(self)
    __swig_destroy__ = _pycnnl.delete_IntVector2
    __del__ = lambda self: None
IntVector2_swigregister = _pycnnl.IntVector2_swigregister
IntVector2_swigregister(IntVector2)

class DoubleVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnl.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnl.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnl.DoubleVector2___bool__(self)

    def __len__(self):
        return _pycnnl.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnl.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnl.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnl.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnl.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnl.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnl.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnl.DoubleVector2_pop(self)

    def append(self, x):
        return _pycnnl.DoubleVector2_append(self, x)

    def empty(self):
        return _pycnnl.DoubleVector2_empty(self)

    def size(self):
        return _pycnnl.DoubleVector2_size(self)

    def swap(self, v):
        return _pycnnl.DoubleVector2_swap(self, v)

    def begin(self):
        return _pycnnl.DoubleVector2_begin(self)

    def end(self):
        return _pycnnl.DoubleVector2_end(self)

    def rbegin(self):
        return _pycnnl.DoubleVector2_rbegin(self)

    def rend(self):
        return _pycnnl.DoubleVector2_rend(self)

    def clear(self):
        return _pycnnl.DoubleVector2_clear(self)

    def get_allocator(self):
        return _pycnnl.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnl.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnl.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnl.new_DoubleVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnl.DoubleVector2_push_back(self, x)

    def front(self):
        return _pycnnl.DoubleVector2_front(self)

    def back(self):
        return _pycnnl.DoubleVector2_back(self)

    def assign(self, n, x):
        return _pycnnl.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnl.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnl.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnl.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _pycnnl.DoubleVector2_capacity(self)
    __swig_destroy__ = _pycnnl.delete_DoubleVector2
    __del__ = lambda self: None
DoubleVector2_swigregister = _pycnnl.DoubleVector2_swigregister
DoubleVector2_swigregister(DoubleVector2)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer"] = _pycnnl.Layer_layer_set
    __swig_getmethods__["layer"] = _pycnnl.Layer_layer_get
    if _newclass:
        layer = _swig_property(_pycnnl.Layer_layer_get, _pycnnl.Layer_layer_set)
    __swig_setmethods__["name"] = _pycnnl.Layer_name_set
    __swig_getmethods__["name"] = _pycnnl.Layer_name_get
    if _newclass:
        name = _swig_property(_pycnnl.Layer_name_get, _pycnnl.Layer_name_set)
    __swig_setmethods__["type"] = _pycnnl.Layer_type_set
    __swig_getmethods__["type"] = _pycnnl.Layer_type_get
    if _newclass:
        type = _swig_property(_pycnnl.Layer_type_get, _pycnnl.Layer_type_set)
    __swig_setmethods__["isParamLoaded"] = _pycnnl.Layer_isParamLoaded_set
    __swig_getmethods__["isParamLoaded"] = _pycnnl.Layer_isParamLoaded_get
    if _newclass:
        isParamLoaded = _swig_property(_pycnnl.Layer_isParamLoaded_get, _pycnnl.Layer_isParamLoaded_set)

    def __init__(self, layer, name, type, is_param_loaded):
        this = _pycnnl.new_Layer(layer, name, type, is_param_loaded)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_Layer
    __del__ = lambda self: None
Layer_swigregister = _pycnnl.Layer_swigregister
Layer_swigregister(Layer)

class CnnlNet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CnnlNet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CnnlNet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycnnl.new_CnnlNet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_CnnlNet
    __del__ = lambda self: None

    def setInputShape(self, *args):
        return _pycnnl.CnnlNet_setInputShape(self, *args)

    def setOutputShape(self, *args):
        return _pycnnl.CnnlNet_setOutputShape(self, *args)

    def createConvLayer(self, layer_name, input_shape, out_channel, kernel_size, stride, dilation, pad):
        return _pycnnl.CnnlNet_createConvLayer(self, layer_name, input_shape, out_channel, kernel_size, stride, dilation, pad)

    def createMlpLayer(self, layer_name, input_shape, weight_shape, output_shape):
        return _pycnnl.CnnlNet_createMlpLayer(self, layer_name, input_shape, weight_shape, output_shape)

    def createReLuLayer(self, layer_name):
        return _pycnnl.CnnlNet_createReLuLayer(self, layer_name)

    def createSoftmaxLayer(self, layer_name, input_shape, axis):
        return _pycnnl.CnnlNet_createSoftmaxLayer(self, layer_name, input_shape, axis)

    def createPoolingLayer(self, layer_name, input_shape, kernel_size, stride):
        return _pycnnl.CnnlNet_createPoolingLayer(self, layer_name, input_shape, kernel_size, stride)

    def setInputData(self, data):
        return _pycnnl.CnnlNet_setInputData(self, data)

    def forward(self):
        return _pycnnl.CnnlNet_forward(self)

    def getOutputData(self):
        return _pycnnl.CnnlNet_getOutputData(self)

    def loadParams(self, layer_id, filter_data, bias_data):
        return _pycnnl.CnnlNet_loadParams(self, layer_id, filter_data, bias_data)

    def size(self):
        return _pycnnl.CnnlNet_size(self)

    def getLayerName(self, layer_id):
        return _pycnnl.CnnlNet_getLayerName(self, layer_id)

    def needToBeQuantized(self, layer_id):
        return _pycnnl.CnnlNet_needToBeQuantized(self, layer_id)
CnnlNet_swigregister = _pycnnl.CnnlNet_swigregister
CnnlNet_swigregister(CnnlNet)

OPT_LEN = _pycnnl.OPT_LEN
CAST = _pycnnl.CAST
CONVOLUTION = _pycnnl.CONVOLUTION
LRN = _pycnnl.LRN
MLP = _pycnnl.MLP
NORMALIZE = _pycnnl.NORMALIZE
RELU = _pycnnl.RELU
SOFTMAX = _pycnnl.SOFTMAX
POOL = _pycnnl.POOL
FLATTEN = _pycnnl.FLATTEN
class QuantParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuantParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _pycnnl.QuantParam_position_set
    __swig_getmethods__["position"] = _pycnnl.QuantParam_position_get
    if _newclass:
        position = _swig_property(_pycnnl.QuantParam_position_get, _pycnnl.QuantParam_position_set)
    __swig_setmethods__["scale"] = _pycnnl.QuantParam_scale_set
    __swig_getmethods__["scale"] = _pycnnl.QuantParam_scale_get
    if _newclass:
        scale = _swig_property(_pycnnl.QuantParam_scale_get, _pycnnl.QuantParam_scale_set)

    def __init__(self, *args):
        this = _pycnnl.new_QuantParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_QuantParam
    __del__ = lambda self: None
QuantParam_swigregister = _pycnnl.QuantParam_swigregister
QuantParam_swigregister(QuantParam)

class QuantTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuantTool, name)
    __repr__ = _swig_repr

    def getQuantParam(self, input_data, layer_name):
        return _pycnnl.QuantTool_getQuantParam(self, input_data, layer_name)

    def __init__(self):
        this = _pycnnl.new_QuantTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_QuantTool
    __del__ = lambda self: None
QuantTool_swigregister = _pycnnl.QuantTool_swigregister
QuantTool_swigregister(QuantTool)

class Kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kh"] = _pycnnl.Kernel_kh_set
    __swig_getmethods__["kh"] = _pycnnl.Kernel_kh_get
    if _newclass:
        kh = _swig_property(_pycnnl.Kernel_kh_get, _pycnnl.Kernel_kh_set)
    __swig_setmethods__["kw"] = _pycnnl.Kernel_kw_set
    __swig_getmethods__["kw"] = _pycnnl.Kernel_kw_get
    if _newclass:
        kw = _swig_property(_pycnnl.Kernel_kw_get, _pycnnl.Kernel_kw_set)
    __swig_setmethods__["sh"] = _pycnnl.Kernel_sh_set
    __swig_getmethods__["sh"] = _pycnnl.Kernel_sh_get
    if _newclass:
        sh = _swig_property(_pycnnl.Kernel_sh_get, _pycnnl.Kernel_sh_set)
    __swig_setmethods__["sw"] = _pycnnl.Kernel_sw_set
    __swig_getmethods__["sw"] = _pycnnl.Kernel_sw_get
    if _newclass:
        sw = _swig_property(_pycnnl.Kernel_sw_get, _pycnnl.Kernel_sw_set)
    __swig_setmethods__["dh"] = _pycnnl.Kernel_dh_set
    __swig_getmethods__["dh"] = _pycnnl.Kernel_dh_get
    if _newclass:
        dh = _swig_property(_pycnnl.Kernel_dh_get, _pycnnl.Kernel_dh_set)
    __swig_setmethods__["dw"] = _pycnnl.Kernel_dw_set
    __swig_getmethods__["dw"] = _pycnnl.Kernel_dw_get
    if _newclass:
        dw = _swig_property(_pycnnl.Kernel_dw_get, _pycnnl.Kernel_dw_set)

    def __init__(self):
        this = _pycnnl.new_Kernel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_Kernel
    __del__ = lambda self: None
Kernel_swigregister = _pycnnl.Kernel_swigregister
Kernel_swigregister(Kernel)

class Shape2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _pycnnl.Shape2D_n_set
    __swig_getmethods__["n"] = _pycnnl.Shape2D_n_get
    if _newclass:
        n = _swig_property(_pycnnl.Shape2D_n_get, _pycnnl.Shape2D_n_set)
    __swig_setmethods__["c"] = _pycnnl.Shape2D_c_set
    __swig_getmethods__["c"] = _pycnnl.Shape2D_c_get
    if _newclass:
        c = _swig_property(_pycnnl.Shape2D_c_get, _pycnnl.Shape2D_c_set)
    __swig_setmethods__["h"] = _pycnnl.Shape2D_h_set
    __swig_getmethods__["h"] = _pycnnl.Shape2D_h_get
    if _newclass:
        h = _swig_property(_pycnnl.Shape2D_h_get, _pycnnl.Shape2D_h_set)
    __swig_setmethods__["w"] = _pycnnl.Shape2D_w_set
    __swig_getmethods__["w"] = _pycnnl.Shape2D_w_get
    if _newclass:
        w = _swig_property(_pycnnl.Shape2D_w_get, _pycnnl.Shape2D_w_set)

    def size(self):
        return _pycnnl.Shape2D_size(self)

    def __init__(self):
        this = _pycnnl.new_Shape2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_Shape2D
    __del__ = lambda self: None
Shape2D_swigregister = _pycnnl.Shape2D_swigregister
Shape2D_swigregister(Shape2D)

class Pad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pt"] = _pycnnl.Pad_pt_set
    __swig_getmethods__["pt"] = _pycnnl.Pad_pt_get
    if _newclass:
        pt = _swig_property(_pycnnl.Pad_pt_get, _pycnnl.Pad_pt_set)
    __swig_setmethods__["pb"] = _pycnnl.Pad_pb_set
    __swig_getmethods__["pb"] = _pycnnl.Pad_pb_get
    if _newclass:
        pb = _swig_property(_pycnnl.Pad_pb_get, _pycnnl.Pad_pb_set)
    __swig_setmethods__["pl"] = _pycnnl.Pad_pl_set
    __swig_getmethods__["pl"] = _pycnnl.Pad_pl_get
    if _newclass:
        pl = _swig_property(_pycnnl.Pad_pl_get, _pycnnl.Pad_pl_set)
    __swig_setmethods__["pr"] = _pycnnl.Pad_pr_set
    __swig_getmethods__["pr"] = _pycnnl.Pad_pr_get
    if _newclass:
        pr = _swig_property(_pycnnl.Pad_pr_get, _pycnnl.Pad_pr_set)

    def __init__(self):
        this = _pycnnl.new_Pad()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_Pad
    __del__ = lambda self: None
Pad_swigregister = _pycnnl.Pad_swigregister
Pad_swigregister(Pad)

class DataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_dtype"] = _pycnnl.DataType_input_dtype_set
    __swig_getmethods__["input_dtype"] = _pycnnl.DataType_input_dtype_get
    if _newclass:
        input_dtype = _swig_property(_pycnnl.DataType_input_dtype_get, _pycnnl.DataType_input_dtype_set)
    __swig_setmethods__["weight_dtype"] = _pycnnl.DataType_weight_dtype_set
    __swig_getmethods__["weight_dtype"] = _pycnnl.DataType_weight_dtype_get
    if _newclass:
        weight_dtype = _swig_property(_pycnnl.DataType_weight_dtype_get, _pycnnl.DataType_weight_dtype_set)
    __swig_setmethods__["output_dtype"] = _pycnnl.DataType_output_dtype_set
    __swig_getmethods__["output_dtype"] = _pycnnl.DataType_output_dtype_get
    if _newclass:
        output_dtype = _swig_property(_pycnnl.DataType_output_dtype_get, _pycnnl.DataType_output_dtype_set)
    __swig_setmethods__["layout"] = _pycnnl.DataType_layout_set
    __swig_getmethods__["layout"] = _pycnnl.DataType_layout_get
    if _newclass:
        layout = _swig_property(_pycnnl.DataType_layout_get, _pycnnl.DataType_layout_set)

    def __init__(self):
        this = _pycnnl.new_DataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_DataType
    __del__ = lambda self: None
DataType_swigregister = _pycnnl.DataType_swigregister
DataType_swigregister(DataType)

class ShapeParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _pycnnl.ShapeParam_input_set
    __swig_getmethods__["input"] = _pycnnl.ShapeParam_input_get
    if _newclass:
        input = _swig_property(_pycnnl.ShapeParam_input_get, _pycnnl.ShapeParam_input_set)
    __swig_setmethods__["weight"] = _pycnnl.ShapeParam_weight_set
    __swig_getmethods__["weight"] = _pycnnl.ShapeParam_weight_get
    if _newclass:
        weight = _swig_property(_pycnnl.ShapeParam_weight_get, _pycnnl.ShapeParam_weight_set)
    __swig_setmethods__["output"] = _pycnnl.ShapeParam_output_set
    __swig_getmethods__["output"] = _pycnnl.ShapeParam_output_get
    if _newclass:
        output = _swig_property(_pycnnl.ShapeParam_output_get, _pycnnl.ShapeParam_output_set)
    __swig_setmethods__["bias"] = _pycnnl.ShapeParam_bias_set
    __swig_getmethods__["bias"] = _pycnnl.ShapeParam_bias_get
    if _newclass:
        bias = _swig_property(_pycnnl.ShapeParam_bias_get, _pycnnl.ShapeParam_bias_set)
    __swig_setmethods__["kernel"] = _pycnnl.ShapeParam_kernel_set
    __swig_getmethods__["kernel"] = _pycnnl.ShapeParam_kernel_get
    if _newclass:
        kernel = _swig_property(_pycnnl.ShapeParam_kernel_get, _pycnnl.ShapeParam_kernel_set)
    __swig_setmethods__["pad"] = _pycnnl.ShapeParam_pad_set
    __swig_getmethods__["pad"] = _pycnnl.ShapeParam_pad_get
    if _newclass:
        pad = _swig_property(_pycnnl.ShapeParam_pad_get, _pycnnl.ShapeParam_pad_set)
    __swig_setmethods__["datainfo"] = _pycnnl.ShapeParam_datainfo_set
    __swig_getmethods__["datainfo"] = _pycnnl.ShapeParam_datainfo_get
    if _newclass:
        datainfo = _swig_property(_pycnnl.ShapeParam_datainfo_get, _pycnnl.ShapeParam_datainfo_set)
    __swig_setmethods__["has_bias"] = _pycnnl.ShapeParam_has_bias_set
    __swig_getmethods__["has_bias"] = _pycnnl.ShapeParam_has_bias_get
    if _newclass:
        has_bias = _swig_property(_pycnnl.ShapeParam_has_bias_get, _pycnnl.ShapeParam_has_bias_set)
    __swig_setmethods__["group_count"] = _pycnnl.ShapeParam_group_count_set
    __swig_getmethods__["group_count"] = _pycnnl.ShapeParam_group_count_get
    if _newclass:
        group_count = _swig_property(_pycnnl.ShapeParam_group_count_get, _pycnnl.ShapeParam_group_count_set)

    def __init__(self):
        this = _pycnnl.new_ShapeParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_ShapeParam
    __del__ = lambda self: None
ShapeParam_swigregister = _pycnnl.ShapeParam_swigregister
ShapeParam_swigregister(ShapeParam)

class DataAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpu_data"] = _pycnnl.DataAddress_cpu_data_set
    __swig_getmethods__["cpu_data"] = _pycnnl.DataAddress_cpu_data_get
    if _newclass:
        cpu_data = _swig_property(_pycnnl.DataAddress_cpu_data_get, _pycnnl.DataAddress_cpu_data_set)
    __swig_setmethods__["fp_data"] = _pycnnl.DataAddress_fp_data_set
    __swig_getmethods__["fp_data"] = _pycnnl.DataAddress_fp_data_get
    if _newclass:
        fp_data = _swig_property(_pycnnl.DataAddress_fp_data_get, _pycnnl.DataAddress_fp_data_set)
    __swig_setmethods__["host"] = _pycnnl.DataAddress_host_set
    __swig_getmethods__["host"] = _pycnnl.DataAddress_host_get
    if _newclass:
        host = _swig_property(_pycnnl.DataAddress_host_get, _pycnnl.DataAddress_host_set)
    __swig_setmethods__["device"] = _pycnnl.DataAddress_device_set
    __swig_getmethods__["device"] = _pycnnl.DataAddress_device_get
    if _newclass:
        device = _swig_property(_pycnnl.DataAddress_device_get, _pycnnl.DataAddress_device_set)
    __swig_setmethods__["mlu_size"] = _pycnnl.DataAddress_mlu_size_set
    __swig_getmethods__["mlu_size"] = _pycnnl.DataAddress_mlu_size_get
    if _newclass:
        mlu_size = _swig_property(_pycnnl.DataAddress_mlu_size_get, _pycnnl.DataAddress_mlu_size_set)
    __swig_setmethods__["fp_size"] = _pycnnl.DataAddress_fp_size_set
    __swig_getmethods__["fp_size"] = _pycnnl.DataAddress_fp_size_get
    if _newclass:
        fp_size = _swig_property(_pycnnl.DataAddress_fp_size_get, _pycnnl.DataAddress_fp_size_set)

    def __init__(self):
        this = _pycnnl.new_DataAddress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_DataAddress
    __del__ = lambda self: None
DataAddress_swigregister = _pycnnl.DataAddress_swigregister
DataAddress_swigregister(DataAddress)

class HostTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostTimer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t0"] = _pycnnl.HostTimer_t0_set
    __swig_getmethods__["t0"] = _pycnnl.HostTimer_t0_get
    if _newclass:
        t0 = _swig_property(_pycnnl.HostTimer_t0_get, _pycnnl.HostTimer_t0_set)
    __swig_setmethods__["t1"] = _pycnnl.HostTimer_t1_set
    __swig_getmethods__["t1"] = _pycnnl.HostTimer_t1_get
    if _newclass:
        t1 = _swig_property(_pycnnl.HostTimer_t1_get, _pycnnl.HostTimer_t1_set)
    __swig_setmethods__["tv_nsec"] = _pycnnl.HostTimer_tv_nsec_set
    __swig_getmethods__["tv_nsec"] = _pycnnl.HostTimer_tv_nsec_get
    if _newclass:
        tv_nsec = _swig_property(_pycnnl.HostTimer_tv_nsec_get, _pycnnl.HostTimer_tv_nsec_set)
    __swig_setmethods__["tv_sec"] = _pycnnl.HostTimer_tv_sec_set
    __swig_getmethods__["tv_sec"] = _pycnnl.HostTimer_tv_sec_get
    if _newclass:
        tv_sec = _swig_property(_pycnnl.HostTimer_tv_sec_get, _pycnnl.HostTimer_tv_sec_set)
    __swig_setmethods__["tv_usec"] = _pycnnl.HostTimer_tv_usec_set
    __swig_getmethods__["tv_usec"] = _pycnnl.HostTimer_tv_usec_get
    if _newclass:
        tv_usec = _swig_property(_pycnnl.HostTimer_tv_usec_get, _pycnnl.HostTimer_tv_usec_set)

    def start(self):
        return _pycnnl.HostTimer_start(self)

    def stop(self):
        return _pycnnl.HostTimer_stop(self)

    def __init__(self):
        this = _pycnnl.new_HostTimer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnl.delete_HostTimer
    __del__ = lambda self: None
HostTimer_swigregister = _pycnnl.HostTimer_swigregister
HostTimer_swigregister(HostTimer)


def initDevice(dev, queue, handle):
    return _pycnnl.initDevice(dev, queue, handle)
initDevice = _pycnnl.initDevice

def dataSize(dtype):
    return _pycnnl.dataSize(dtype)
dataSize = _pycnnl.dataSize

def convertCnnlDtypeToCnrt(dtype):
    return _pycnnl.convertCnnlDtypeToCnrt(dtype)
convertCnnlDtypeToCnrt = _pycnnl.convertCnnlDtypeToCnrt

def getPosition(input, num, datatype, position):
    return _pycnnl.getPosition(input, num, datatype, position)
getPosition = _pycnnl.getPosition

def getPositionAndScale(input, size, dtype, pos, scale):
    return _pycnnl.getPositionAndScale(input, size, dtype, pos, scale)
getPositionAndScale = _pycnnl.getPositionAndScale

def castData(src_data, src_dtype, dst_data, dst_dtype, dequantify_data, quant_mode, size, pos, scale, offset):
    return _pycnnl.castData(src_data, src_dtype, dst_data, dst_dtype, dequantify_data, quant_mode, size, pos, scale, offset)
castData = _pycnnl.castData

def parserParam(argc, argv, param):
    return _pycnnl.parserParam(argc, argv, param)
parserParam = _pycnnl.parserParam

def setTensorDesc(desc, shape, dtype, layout):
    return _pycnnl.setTensorDesc(desc, shape, dtype, layout)
setTensorDesc = _pycnnl.setTensorDesc

def mallocDataRandf(size, low, hight):
    return _pycnnl.mallocDataRandf(size, low, hight)
mallocDataRandf = _pycnnl.mallocDataRandf

def saveDataToFile(file, data, count):
    return _pycnnl.saveDataToFile(file, data, count)
saveDataToFile = _pycnnl.saveDataToFile

def saveHexDataToFile(file, data, dtype, count):
    return _pycnnl.saveHexDataToFile(file, data, dtype, count)
saveHexDataToFile = _pycnnl.saveHexDataToFile

def computeDiff1(cpu_result, mlu_result, count):
    return _pycnnl.computeDiff1(cpu_result, mlu_result, count)
computeDiff1 = _pycnnl.computeDiff1

def computeDiff2(cpu_result, mlu_result, count):
    return _pycnnl.computeDiff2(cpu_result, mlu_result, count)
computeDiff2 = _pycnnl.computeDiff2
# This file is compatible with both classic and new-style classes.


