# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pycnnlmlp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pycnnlmlp')
    _pycnnlmlp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycnnlmlp', [dirname(__file__)])
        except ImportError:
            import _pycnnlmlp
            return _pycnnlmlp
        try:
            _mod = imp.load_module('_pycnnlmlp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pycnnlmlp = swig_import_helper()
    del swig_import_helper
else:
    import _pycnnlmlp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycnnlmlp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pycnnlmlp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycnnlmlp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycnnlmlp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycnnlmlp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycnnlmlp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycnnlmlp.SwigPyIterator_copy(self)

    def next(self):
        return _pycnnlmlp.SwigPyIterator_next(self)

    def __next__(self):
        return _pycnnlmlp.SwigPyIterator___next__(self)

    def previous(self):
        return _pycnnlmlp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycnnlmlp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycnnlmlp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycnnlmlp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycnnlmlp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycnnlmlp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycnnlmlp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycnnlmlp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pycnnlmlp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.FloatVector___bool__(self)

    def __len__(self):
        return _pycnnlmlp.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.FloatVector_pop(self)

    def append(self, x):
        return _pycnnlmlp.FloatVector_append(self, x)

    def empty(self):
        return _pycnnlmlp.FloatVector_empty(self)

    def size(self):
        return _pycnnlmlp.FloatVector_size(self)

    def swap(self, v):
        return _pycnnlmlp.FloatVector_swap(self, v)

    def begin(self):
        return _pycnnlmlp.FloatVector_begin(self)

    def end(self):
        return _pycnnlmlp.FloatVector_end(self)

    def rbegin(self):
        return _pycnnlmlp.FloatVector_rbegin(self)

    def rend(self):
        return _pycnnlmlp.FloatVector_rend(self)

    def clear(self):
        return _pycnnlmlp.FloatVector_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.FloatVector_push_back(self, x)

    def front(self):
        return _pycnnlmlp.FloatVector_front(self)

    def back(self):
        return _pycnnlmlp.FloatVector_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.FloatVector_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.FloatVector_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pycnnlmlp.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.IntVector___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.IntVector___bool__(self)

    def __len__(self):
        return _pycnnlmlp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.IntVector___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.IntVector_pop(self)

    def append(self, x):
        return _pycnnlmlp.IntVector_append(self, x)

    def empty(self):
        return _pycnnlmlp.IntVector_empty(self)

    def size(self):
        return _pycnnlmlp.IntVector_size(self)

    def swap(self, v):
        return _pycnnlmlp.IntVector_swap(self, v)

    def begin(self):
        return _pycnnlmlp.IntVector_begin(self)

    def end(self):
        return _pycnnlmlp.IntVector_end(self)

    def rbegin(self):
        return _pycnnlmlp.IntVector_rbegin(self)

    def rend(self):
        return _pycnnlmlp.IntVector_rend(self)

    def clear(self):
        return _pycnnlmlp.IntVector_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.IntVector_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.IntVector_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.IntVector_push_back(self, x)

    def front(self):
        return _pycnnlmlp.IntVector_front(self)

    def back(self):
        return _pycnnlmlp.IntVector_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.IntVector_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.IntVector_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pycnnlmlp.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.DoubleVector___bool__(self)

    def __len__(self):
        return _pycnnlmlp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.DoubleVector_pop(self)

    def append(self, x):
        return _pycnnlmlp.DoubleVector_append(self, x)

    def empty(self):
        return _pycnnlmlp.DoubleVector_empty(self)

    def size(self):
        return _pycnnlmlp.DoubleVector_size(self)

    def swap(self, v):
        return _pycnnlmlp.DoubleVector_swap(self, v)

    def begin(self):
        return _pycnnlmlp.DoubleVector_begin(self)

    def end(self):
        return _pycnnlmlp.DoubleVector_end(self)

    def rbegin(self):
        return _pycnnlmlp.DoubleVector_rbegin(self)

    def rend(self):
        return _pycnnlmlp.DoubleVector_rend(self)

    def clear(self):
        return _pycnnlmlp.DoubleVector_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.DoubleVector_push_back(self, x)

    def front(self):
        return _pycnnlmlp.DoubleVector_front(self)

    def back(self):
        return _pycnnlmlp.DoubleVector_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.DoubleVector_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pycnnlmlp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.FloatVector2___bool__(self)

    def __len__(self):
        return _pycnnlmlp.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.FloatVector2_pop(self)

    def append(self, x):
        return _pycnnlmlp.FloatVector2_append(self, x)

    def empty(self):
        return _pycnnlmlp.FloatVector2_empty(self)

    def size(self):
        return _pycnnlmlp.FloatVector2_size(self)

    def swap(self, v):
        return _pycnnlmlp.FloatVector2_swap(self, v)

    def begin(self):
        return _pycnnlmlp.FloatVector2_begin(self)

    def end(self):
        return _pycnnlmlp.FloatVector2_end(self)

    def rbegin(self):
        return _pycnnlmlp.FloatVector2_rbegin(self)

    def rend(self):
        return _pycnnlmlp.FloatVector2_rend(self)

    def clear(self):
        return _pycnnlmlp.FloatVector2_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_FloatVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.FloatVector2_push_back(self, x)

    def front(self):
        return _pycnnlmlp.FloatVector2_front(self)

    def back(self):
        return _pycnnlmlp.FloatVector2_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.FloatVector2_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.FloatVector2_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_FloatVector2
    __del__ = lambda self: None
FloatVector2_swigregister = _pycnnlmlp.FloatVector2_swigregister
FloatVector2_swigregister(FloatVector2)

class IntVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.IntVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.IntVector2___bool__(self)

    def __len__(self):
        return _pycnnlmlp.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.IntVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.IntVector2_pop(self)

    def append(self, x):
        return _pycnnlmlp.IntVector2_append(self, x)

    def empty(self):
        return _pycnnlmlp.IntVector2_empty(self)

    def size(self):
        return _pycnnlmlp.IntVector2_size(self)

    def swap(self, v):
        return _pycnnlmlp.IntVector2_swap(self, v)

    def begin(self):
        return _pycnnlmlp.IntVector2_begin(self)

    def end(self):
        return _pycnnlmlp.IntVector2_end(self)

    def rbegin(self):
        return _pycnnlmlp.IntVector2_rbegin(self)

    def rend(self):
        return _pycnnlmlp.IntVector2_rend(self)

    def clear(self):
        return _pycnnlmlp.IntVector2_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.IntVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.IntVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.IntVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_IntVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.IntVector2_push_back(self, x)

    def front(self):
        return _pycnnlmlp.IntVector2_front(self)

    def back(self):
        return _pycnnlmlp.IntVector2_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.IntVector2_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.IntVector2_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_IntVector2
    __del__ = lambda self: None
IntVector2_swigregister = _pycnnlmlp.IntVector2_swigregister
IntVector2_swigregister(IntVector2)

class DoubleVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnnlmlp.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnnlmlp.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _pycnnlmlp.DoubleVector2___bool__(self)

    def __len__(self):
        return _pycnnlmlp.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnnlmlp.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnnlmlp.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnnlmlp.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnnlmlp.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnnlmlp.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnnlmlp.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _pycnnlmlp.DoubleVector2_pop(self)

    def append(self, x):
        return _pycnnlmlp.DoubleVector2_append(self, x)

    def empty(self):
        return _pycnnlmlp.DoubleVector2_empty(self)

    def size(self):
        return _pycnnlmlp.DoubleVector2_size(self)

    def swap(self, v):
        return _pycnnlmlp.DoubleVector2_swap(self, v)

    def begin(self):
        return _pycnnlmlp.DoubleVector2_begin(self)

    def end(self):
        return _pycnnlmlp.DoubleVector2_end(self)

    def rbegin(self):
        return _pycnnlmlp.DoubleVector2_rbegin(self)

    def rend(self):
        return _pycnnlmlp.DoubleVector2_rend(self)

    def clear(self):
        return _pycnnlmlp.DoubleVector2_clear(self)

    def get_allocator(self):
        return _pycnnlmlp.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _pycnnlmlp.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _pycnnlmlp.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pycnnlmlp.new_DoubleVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycnnlmlp.DoubleVector2_push_back(self, x)

    def front(self):
        return _pycnnlmlp.DoubleVector2_front(self)

    def back(self):
        return _pycnnlmlp.DoubleVector2_back(self)

    def assign(self, n, x):
        return _pycnnlmlp.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnnlmlp.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnnlmlp.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnnlmlp.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _pycnnlmlp.DoubleVector2_capacity(self)
    __swig_destroy__ = _pycnnlmlp.delete_DoubleVector2
    __del__ = lambda self: None
DoubleVector2_swigregister = _pycnnlmlp.DoubleVector2_swigregister
DoubleVector2_swigregister(DoubleVector2)

CONV_2D = _pycnnlmlp.CONV_2D
class CnnlLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CnnlLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CnnlLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycnnlmlp.new_CnnlLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_CnnlLayer
    __del__ = lambda self: None
CnnlLayer_swigregister = _pycnnlmlp.CnnlLayer_swigregister
CnnlLayer_swigregister(CnnlLayer)

class CnnlMlpLayer(CnnlLayer):
    __swig_setmethods__ = {}
    for _s in [CnnlLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CnnlMlpLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [CnnlLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CnnlMlpLayer, name)
    __repr__ = _swig_repr

    def __init__(self, input_shape, output_shape, input_position, input_scale):
        this = _pycnnlmlp.new_CnnlMlpLayer(input_shape, output_shape, input_position, input_scale)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_CnnlMlpLayer
    __del__ = lambda self: None

    def forward(self, *args):
        return _pycnnlmlp.CnnlMlpLayer_forward(self, *args)

    def getCPUdata(self):
        return _pycnnlmlp.CnnlMlpLayer_getCPUdata(self)

    def loadParam(self, filter_data, bias_data, filter_position, filter_scale):
        return _pycnnlmlp.CnnlMlpLayer_loadParam(self, filter_data, bias_data, filter_position, filter_scale)
CnnlMlpLayer_swigregister = _pycnnlmlp.CnnlMlpLayer_swigregister
CnnlMlpLayer_swigregister(CnnlMlpLayer)

OPT_LEN = _pycnnlmlp.OPT_LEN
CAST = _pycnnlmlp.CAST
CONVOLUTION = _pycnnlmlp.CONVOLUTION
LRN = _pycnnlmlp.LRN
MLP = _pycnnlmlp.MLP
NORMALIZE = _pycnnlmlp.NORMALIZE
RELU = _pycnnlmlp.RELU
SOFTMAX = _pycnnlmlp.SOFTMAX
POOL = _pycnnlmlp.POOL
FLATTEN = _pycnnlmlp.FLATTEN
class Kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kh"] = _pycnnlmlp.Kernel_kh_set
    __swig_getmethods__["kh"] = _pycnnlmlp.Kernel_kh_get
    if _newclass:
        kh = _swig_property(_pycnnlmlp.Kernel_kh_get, _pycnnlmlp.Kernel_kh_set)
    __swig_setmethods__["kw"] = _pycnnlmlp.Kernel_kw_set
    __swig_getmethods__["kw"] = _pycnnlmlp.Kernel_kw_get
    if _newclass:
        kw = _swig_property(_pycnnlmlp.Kernel_kw_get, _pycnnlmlp.Kernel_kw_set)
    __swig_setmethods__["sh"] = _pycnnlmlp.Kernel_sh_set
    __swig_getmethods__["sh"] = _pycnnlmlp.Kernel_sh_get
    if _newclass:
        sh = _swig_property(_pycnnlmlp.Kernel_sh_get, _pycnnlmlp.Kernel_sh_set)
    __swig_setmethods__["sw"] = _pycnnlmlp.Kernel_sw_set
    __swig_getmethods__["sw"] = _pycnnlmlp.Kernel_sw_get
    if _newclass:
        sw = _swig_property(_pycnnlmlp.Kernel_sw_get, _pycnnlmlp.Kernel_sw_set)
    __swig_setmethods__["dh"] = _pycnnlmlp.Kernel_dh_set
    __swig_getmethods__["dh"] = _pycnnlmlp.Kernel_dh_get
    if _newclass:
        dh = _swig_property(_pycnnlmlp.Kernel_dh_get, _pycnnlmlp.Kernel_dh_set)
    __swig_setmethods__["dw"] = _pycnnlmlp.Kernel_dw_set
    __swig_getmethods__["dw"] = _pycnnlmlp.Kernel_dw_get
    if _newclass:
        dw = _swig_property(_pycnnlmlp.Kernel_dw_get, _pycnnlmlp.Kernel_dw_set)

    def __init__(self):
        this = _pycnnlmlp.new_Kernel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_Kernel
    __del__ = lambda self: None
Kernel_swigregister = _pycnnlmlp.Kernel_swigregister
Kernel_swigregister(Kernel)

class Shape2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _pycnnlmlp.Shape2D_n_set
    __swig_getmethods__["n"] = _pycnnlmlp.Shape2D_n_get
    if _newclass:
        n = _swig_property(_pycnnlmlp.Shape2D_n_get, _pycnnlmlp.Shape2D_n_set)
    __swig_setmethods__["c"] = _pycnnlmlp.Shape2D_c_set
    __swig_getmethods__["c"] = _pycnnlmlp.Shape2D_c_get
    if _newclass:
        c = _swig_property(_pycnnlmlp.Shape2D_c_get, _pycnnlmlp.Shape2D_c_set)
    __swig_setmethods__["h"] = _pycnnlmlp.Shape2D_h_set
    __swig_getmethods__["h"] = _pycnnlmlp.Shape2D_h_get
    if _newclass:
        h = _swig_property(_pycnnlmlp.Shape2D_h_get, _pycnnlmlp.Shape2D_h_set)
    __swig_setmethods__["w"] = _pycnnlmlp.Shape2D_w_set
    __swig_getmethods__["w"] = _pycnnlmlp.Shape2D_w_get
    if _newclass:
        w = _swig_property(_pycnnlmlp.Shape2D_w_get, _pycnnlmlp.Shape2D_w_set)

    def size(self):
        return _pycnnlmlp.Shape2D_size(self)

    def __init__(self):
        this = _pycnnlmlp.new_Shape2D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_Shape2D
    __del__ = lambda self: None
Shape2D_swigregister = _pycnnlmlp.Shape2D_swigregister
Shape2D_swigregister(Shape2D)

class Pad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pt"] = _pycnnlmlp.Pad_pt_set
    __swig_getmethods__["pt"] = _pycnnlmlp.Pad_pt_get
    if _newclass:
        pt = _swig_property(_pycnnlmlp.Pad_pt_get, _pycnnlmlp.Pad_pt_set)
    __swig_setmethods__["pb"] = _pycnnlmlp.Pad_pb_set
    __swig_getmethods__["pb"] = _pycnnlmlp.Pad_pb_get
    if _newclass:
        pb = _swig_property(_pycnnlmlp.Pad_pb_get, _pycnnlmlp.Pad_pb_set)
    __swig_setmethods__["pl"] = _pycnnlmlp.Pad_pl_set
    __swig_getmethods__["pl"] = _pycnnlmlp.Pad_pl_get
    if _newclass:
        pl = _swig_property(_pycnnlmlp.Pad_pl_get, _pycnnlmlp.Pad_pl_set)
    __swig_setmethods__["pr"] = _pycnnlmlp.Pad_pr_set
    __swig_getmethods__["pr"] = _pycnnlmlp.Pad_pr_get
    if _newclass:
        pr = _swig_property(_pycnnlmlp.Pad_pr_get, _pycnnlmlp.Pad_pr_set)

    def __init__(self):
        this = _pycnnlmlp.new_Pad()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_Pad
    __del__ = lambda self: None
Pad_swigregister = _pycnnlmlp.Pad_swigregister
Pad_swigregister(Pad)

class DataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_dtype"] = _pycnnlmlp.DataType_input_dtype_set
    __swig_getmethods__["input_dtype"] = _pycnnlmlp.DataType_input_dtype_get
    if _newclass:
        input_dtype = _swig_property(_pycnnlmlp.DataType_input_dtype_get, _pycnnlmlp.DataType_input_dtype_set)
    __swig_setmethods__["weight_dtype"] = _pycnnlmlp.DataType_weight_dtype_set
    __swig_getmethods__["weight_dtype"] = _pycnnlmlp.DataType_weight_dtype_get
    if _newclass:
        weight_dtype = _swig_property(_pycnnlmlp.DataType_weight_dtype_get, _pycnnlmlp.DataType_weight_dtype_set)
    __swig_setmethods__["output_dtype"] = _pycnnlmlp.DataType_output_dtype_set
    __swig_getmethods__["output_dtype"] = _pycnnlmlp.DataType_output_dtype_get
    if _newclass:
        output_dtype = _swig_property(_pycnnlmlp.DataType_output_dtype_get, _pycnnlmlp.DataType_output_dtype_set)
    __swig_setmethods__["layout"] = _pycnnlmlp.DataType_layout_set
    __swig_getmethods__["layout"] = _pycnnlmlp.DataType_layout_get
    if _newclass:
        layout = _swig_property(_pycnnlmlp.DataType_layout_get, _pycnnlmlp.DataType_layout_set)

    def __init__(self):
        this = _pycnnlmlp.new_DataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_DataType
    __del__ = lambda self: None
DataType_swigregister = _pycnnlmlp.DataType_swigregister
DataType_swigregister(DataType)

class ShapeParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _pycnnlmlp.ShapeParam_input_set
    __swig_getmethods__["input"] = _pycnnlmlp.ShapeParam_input_get
    if _newclass:
        input = _swig_property(_pycnnlmlp.ShapeParam_input_get, _pycnnlmlp.ShapeParam_input_set)
    __swig_setmethods__["weight"] = _pycnnlmlp.ShapeParam_weight_set
    __swig_getmethods__["weight"] = _pycnnlmlp.ShapeParam_weight_get
    if _newclass:
        weight = _swig_property(_pycnnlmlp.ShapeParam_weight_get, _pycnnlmlp.ShapeParam_weight_set)
    __swig_setmethods__["output"] = _pycnnlmlp.ShapeParam_output_set
    __swig_getmethods__["output"] = _pycnnlmlp.ShapeParam_output_get
    if _newclass:
        output = _swig_property(_pycnnlmlp.ShapeParam_output_get, _pycnnlmlp.ShapeParam_output_set)
    __swig_setmethods__["bias"] = _pycnnlmlp.ShapeParam_bias_set
    __swig_getmethods__["bias"] = _pycnnlmlp.ShapeParam_bias_get
    if _newclass:
        bias = _swig_property(_pycnnlmlp.ShapeParam_bias_get, _pycnnlmlp.ShapeParam_bias_set)
    __swig_setmethods__["kernel"] = _pycnnlmlp.ShapeParam_kernel_set
    __swig_getmethods__["kernel"] = _pycnnlmlp.ShapeParam_kernel_get
    if _newclass:
        kernel = _swig_property(_pycnnlmlp.ShapeParam_kernel_get, _pycnnlmlp.ShapeParam_kernel_set)
    __swig_setmethods__["pad"] = _pycnnlmlp.ShapeParam_pad_set
    __swig_getmethods__["pad"] = _pycnnlmlp.ShapeParam_pad_get
    if _newclass:
        pad = _swig_property(_pycnnlmlp.ShapeParam_pad_get, _pycnnlmlp.ShapeParam_pad_set)
    __swig_setmethods__["datainfo"] = _pycnnlmlp.ShapeParam_datainfo_set
    __swig_getmethods__["datainfo"] = _pycnnlmlp.ShapeParam_datainfo_get
    if _newclass:
        datainfo = _swig_property(_pycnnlmlp.ShapeParam_datainfo_get, _pycnnlmlp.ShapeParam_datainfo_set)
    __swig_setmethods__["has_bias"] = _pycnnlmlp.ShapeParam_has_bias_set
    __swig_getmethods__["has_bias"] = _pycnnlmlp.ShapeParam_has_bias_get
    if _newclass:
        has_bias = _swig_property(_pycnnlmlp.ShapeParam_has_bias_get, _pycnnlmlp.ShapeParam_has_bias_set)
    __swig_setmethods__["group_count"] = _pycnnlmlp.ShapeParam_group_count_set
    __swig_getmethods__["group_count"] = _pycnnlmlp.ShapeParam_group_count_get
    if _newclass:
        group_count = _swig_property(_pycnnlmlp.ShapeParam_group_count_get, _pycnnlmlp.ShapeParam_group_count_set)

    def __init__(self):
        this = _pycnnlmlp.new_ShapeParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_ShapeParam
    __del__ = lambda self: None
ShapeParam_swigregister = _pycnnlmlp.ShapeParam_swigregister
ShapeParam_swigregister(ShapeParam)

class DataAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpu_data"] = _pycnnlmlp.DataAddress_cpu_data_set
    __swig_getmethods__["cpu_data"] = _pycnnlmlp.DataAddress_cpu_data_get
    if _newclass:
        cpu_data = _swig_property(_pycnnlmlp.DataAddress_cpu_data_get, _pycnnlmlp.DataAddress_cpu_data_set)
    __swig_setmethods__["fp_data"] = _pycnnlmlp.DataAddress_fp_data_set
    __swig_getmethods__["fp_data"] = _pycnnlmlp.DataAddress_fp_data_get
    if _newclass:
        fp_data = _swig_property(_pycnnlmlp.DataAddress_fp_data_get, _pycnnlmlp.DataAddress_fp_data_set)
    __swig_setmethods__["host"] = _pycnnlmlp.DataAddress_host_set
    __swig_getmethods__["host"] = _pycnnlmlp.DataAddress_host_get
    if _newclass:
        host = _swig_property(_pycnnlmlp.DataAddress_host_get, _pycnnlmlp.DataAddress_host_set)
    __swig_setmethods__["device"] = _pycnnlmlp.DataAddress_device_set
    __swig_getmethods__["device"] = _pycnnlmlp.DataAddress_device_get
    if _newclass:
        device = _swig_property(_pycnnlmlp.DataAddress_device_get, _pycnnlmlp.DataAddress_device_set)
    __swig_setmethods__["mlu_size"] = _pycnnlmlp.DataAddress_mlu_size_set
    __swig_getmethods__["mlu_size"] = _pycnnlmlp.DataAddress_mlu_size_get
    if _newclass:
        mlu_size = _swig_property(_pycnnlmlp.DataAddress_mlu_size_get, _pycnnlmlp.DataAddress_mlu_size_set)
    __swig_setmethods__["fp_size"] = _pycnnlmlp.DataAddress_fp_size_set
    __swig_getmethods__["fp_size"] = _pycnnlmlp.DataAddress_fp_size_get
    if _newclass:
        fp_size = _swig_property(_pycnnlmlp.DataAddress_fp_size_get, _pycnnlmlp.DataAddress_fp_size_set)

    def __init__(self):
        this = _pycnnlmlp.new_DataAddress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_DataAddress
    __del__ = lambda self: None
DataAddress_swigregister = _pycnnlmlp.DataAddress_swigregister
DataAddress_swigregister(DataAddress)

class HostTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostTimer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t0"] = _pycnnlmlp.HostTimer_t0_set
    __swig_getmethods__["t0"] = _pycnnlmlp.HostTimer_t0_get
    if _newclass:
        t0 = _swig_property(_pycnnlmlp.HostTimer_t0_get, _pycnnlmlp.HostTimer_t0_set)
    __swig_setmethods__["t1"] = _pycnnlmlp.HostTimer_t1_set
    __swig_getmethods__["t1"] = _pycnnlmlp.HostTimer_t1_get
    if _newclass:
        t1 = _swig_property(_pycnnlmlp.HostTimer_t1_get, _pycnnlmlp.HostTimer_t1_set)
    __swig_setmethods__["tv_nsec"] = _pycnnlmlp.HostTimer_tv_nsec_set
    __swig_getmethods__["tv_nsec"] = _pycnnlmlp.HostTimer_tv_nsec_get
    if _newclass:
        tv_nsec = _swig_property(_pycnnlmlp.HostTimer_tv_nsec_get, _pycnnlmlp.HostTimer_tv_nsec_set)
    __swig_setmethods__["tv_sec"] = _pycnnlmlp.HostTimer_tv_sec_set
    __swig_getmethods__["tv_sec"] = _pycnnlmlp.HostTimer_tv_sec_get
    if _newclass:
        tv_sec = _swig_property(_pycnnlmlp.HostTimer_tv_sec_get, _pycnnlmlp.HostTimer_tv_sec_set)
    __swig_setmethods__["tv_usec"] = _pycnnlmlp.HostTimer_tv_usec_set
    __swig_getmethods__["tv_usec"] = _pycnnlmlp.HostTimer_tv_usec_get
    if _newclass:
        tv_usec = _swig_property(_pycnnlmlp.HostTimer_tv_usec_get, _pycnnlmlp.HostTimer_tv_usec_set)

    def start(self):
        return _pycnnlmlp.HostTimer_start(self)

    def stop(self):
        return _pycnnlmlp.HostTimer_stop(self)

    def __init__(self):
        this = _pycnnlmlp.new_HostTimer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycnnlmlp.delete_HostTimer
    __del__ = lambda self: None
HostTimer_swigregister = _pycnnlmlp.HostTimer_swigregister
HostTimer_swigregister(HostTimer)


def initDevice(dev, queue, handle):
    return _pycnnlmlp.initDevice(dev, queue, handle)
initDevice = _pycnnlmlp.initDevice

def dataSize(dtype):
    return _pycnnlmlp.dataSize(dtype)
dataSize = _pycnnlmlp.dataSize

def convertCnnlDtypeToCnrt(dtype):
    return _pycnnlmlp.convertCnnlDtypeToCnrt(dtype)
convertCnnlDtypeToCnrt = _pycnnlmlp.convertCnnlDtypeToCnrt

def getPosition(input, num, datatype, position):
    return _pycnnlmlp.getPosition(input, num, datatype, position)
getPosition = _pycnnlmlp.getPosition

def getPositionAndScale(input, size, dtype, pos, scale):
    return _pycnnlmlp.getPositionAndScale(input, size, dtype, pos, scale)
getPositionAndScale = _pycnnlmlp.getPositionAndScale

def castData(src_data, src_dtype, dst_data, dst_dtype, dequantify_data, quant_mode, size, pos, scale, offset):
    return _pycnnlmlp.castData(src_data, src_dtype, dst_data, dst_dtype, dequantify_data, quant_mode, size, pos, scale, offset)
castData = _pycnnlmlp.castData

def parserParam(argc, argv, param):
    return _pycnnlmlp.parserParam(argc, argv, param)
parserParam = _pycnnlmlp.parserParam

def setTensorDesc(desc, shape, dtype, layout):
    return _pycnnlmlp.setTensorDesc(desc, shape, dtype, layout)
setTensorDesc = _pycnnlmlp.setTensorDesc

def mallocDataRandf(size, low, hight):
    return _pycnnlmlp.mallocDataRandf(size, low, hight)
mallocDataRandf = _pycnnlmlp.mallocDataRandf

def saveDataToFile(file, data, count):
    return _pycnnlmlp.saveDataToFile(file, data, count)
saveDataToFile = _pycnnlmlp.saveDataToFile

def saveHexDataToFile(file, data, dtype, count):
    return _pycnnlmlp.saveHexDataToFile(file, data, dtype, count)
saveHexDataToFile = _pycnnlmlp.saveHexDataToFile

def computeDiff1(cpu_result, mlu_result, count):
    return _pycnnlmlp.computeDiff1(cpu_result, mlu_result, count)
computeDiff1 = _pycnnlmlp.computeDiff1

def computeDiff2(cpu_result, mlu_result, count):
    return _pycnnlmlp.computeDiff2(cpu_result, mlu_result, count)
computeDiff2 = _pycnnlmlp.computeDiff2
# This file is compatible with both classic and new-style classes.


